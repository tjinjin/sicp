#lang racket

(define (p) (p))
(define (test x y)
  (if (= x 0) 0 y))

(test 0 (p))

;適用順序評価の場合
;(test 0 (p))
;(test 0 p)
;(if (= 0 0) 0 p)
;(if #t 0 p)
;0

;正規順序評価の場合
;(test 0 (p))
;(if (= 0 0) 0 (p))
;(0)

; (p)が不明
; 適用順序評価は引数をどんどん評価しながら展開、正規順序評価は先に展開してから評価？

; 答え
; (p)は循環定義されている
;正規順序評価の場合評価は必要なタイミングでされるので、(p)が評価されることはないため循環しない。
;対して、適用順序評価は適宜評価していくので、(p)を展開しようと循環参照に陥る

; 正規順序評価
;(test 0 (p))
;=> (if (= x 0) 0 y))
;=> (if (= 0 0) 0 y))
;=> 0

; 適用順序評価
;(test 0 (p))
;=> (test 0 (p))
;=> (test 0 (p))
;=> (test 0 (p))
;=> ..以下同様に無限にループ

;Lispは適用順序評価を取っているため無限ループに陥る
